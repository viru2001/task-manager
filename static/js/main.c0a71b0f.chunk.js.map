{"version":3,"sources":["firebase.js","context/AuthContext.js","components/PrivateRoute.js","components/UpdateProfile.js","components/Signin.js","components/Signup.js","components/ForgotPassword.js","components/Nav.js","songs/reminder.mp3","components/AddTaskText.js","components/Dashboard.js","components/App.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","useEffect","onAuthStateChanged","user","value","login","email","password","signInWithEmailAndPassword","signup","createUserWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","updateEmail","updatePassword","Provider","PrivateRoute","Component","component","rest","render","props","to","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","Signup","classes","emailRef","useRef","passwordRef","passwordConfirmRef","error","setError","history","useHistory","Container","maxWidth","CssBaseline","className","Avatar","Typography","variant","Alert","severity","AlertTitle","onSubmit","e","preventDefault","current","promises","push","Promise","all","then","catch","finally","Grid","container","item","xs","TextField","required","fullWidth","id","label","name","autoComplete","inputRef","defaultValue","type","placeholder","Button","color","disabled","justifyContent","Signin","showPassword","setShowPassword","a","console","log","autoFocus","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","Visibility","VisibilityOff","message","setMessage","Nav","grow","flexGrow","padding","appbar","background","anchorEl","open","pushState","root","AppBar","Toolbar","align","event","currentTarget","Menu","keepMounted","anchorOrigin","vertical","horizontal","transformOrigin","Boolean","onClose","MenuItem","Link","AddTaskText","initTasksArray","localStorage","getItem","JSON","parse","textfield","addContainer","addTaskBtn","marginLeft","noTask","textAlign","tasksTable","actionBtn","currentTask","setCurrentTask","taskBeingEdited","setTaskBeingEdited","taskArray","setTaskArray","playSong","setPlaySong","setItem","stringify","onChange","target","newTask","length","taskName","isEditing","isDone","map","task","handleEditTaskTextField","size","element","saveEditTask","cancelEdit","editTask","UndoneTask","doneTask","filter","deleteTask","url","reminderSong","playStatus","Sound","status","PLAYING","STOPPED","Dashboard","App","exact","path","UpdateProfile","ForgotPassword","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0a71b0f.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\n\r\nconst app = firebase.initializeApp({\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID\r\n})\r\n\r\nexport const auth = app.auth()\r\nexport default app","import React, { useContext, useState, useEffect } from 'react'\r\nimport { auth } from '../firebase';\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nexport function useAuth() {\r\n    return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n\r\n    const [currentUser, setCurrentUser] = useState();\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    function signup(email, password) {\r\n        return auth.createUserWithEmailAndPassword(email, password)\r\n    }\r\n\r\n    function login(email, password) {\r\n        return auth.signInWithEmailAndPassword(email, password)\r\n    }\r\n\r\n    function logout() {\r\n        return auth.signOut()\r\n    }\r\n\r\n    function updateEmail(email) {\r\n        return currentUser.updateEmail(email)\r\n    }\r\n\r\n    function updatePassword(password) {\r\n        return currentUser.updatePassword(password)\r\n    }\r\n\r\n\r\n    function resetPassword(email) {\r\n        return auth.sendPasswordResetEmail(email)\r\n    }\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(user => {\r\n            setCurrentUser(user)\r\n            setLoading(false)\r\n        })\r\n\r\n        return unsubscribe\r\n    }, [])\r\n\r\n\r\n    const value = {\r\n        currentUser,\r\n        login,\r\n        signup,\r\n        logout,\r\n        resetPassword,\r\n        updateEmail,\r\n        updatePassword\r\n    }\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Redirect, Route } from 'react-router'\r\nimport { useAuth } from '../context/AuthContext'\r\n\r\nexport default function PrivateRoute( {component : Component , ...rest}) {\r\n\r\n    const {currentUser} = useAuth()\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props => {\r\n              return currentUser ? <Component {...props} /> : <Redirect to=\"/task-manager/signin\" />\r\n            }}\r\n        ></Route>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useRef, useState } from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n\r\nexport default function Signup() {\r\n    const classes = useStyles()\r\n\r\n    const emailRef = useRef();\r\n    const passwordRef = useRef();\r\n    const passwordConfirmRef = useRef();\r\n    const { currentUser, updatePassword, updateEmail } = useAuth();\r\n    const [error, setError] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const history = useHistory()\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n            return setError(\"Passwords do not match\");\r\n        }\r\n\r\n        const promises = []\r\n        setLoading(true)\r\n        setError(\"\")\r\n        if (emailRef.current.value !== currentUser.email) {\r\n            promises.push(updateEmail(emailRef.current.value))\r\n        }\r\n\r\n        if (passwordRef.current.value) {\r\n            promises.push(updatePassword(passwordRef.current.value))\r\n        }\r\n\r\n        Promise.all(promises).then(() => {\r\n            history.push(\"/task-manager\")\r\n        }).catch(() => {\r\n            setError(\"Failed to update profile\")\r\n        }).finally(() => {\r\n            setLoading(false)\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Update Profile\r\n                </Typography>\r\n                {error && <Alert severity=\"error\">\r\n                    <AlertTitle>Error</AlertTitle>\r\n                    {error}\r\n                </Alert>}\r\n                <form className={classes.form} onSubmit={handleSubmit}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"Email Address\"\r\n                                name=\"email\"\r\n                                autoComplete=\"email\"\r\n                                inputRef={emailRef}\r\n                                defaultValue={currentUser.email}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"password\"\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                                inputRef={passwordRef}\r\n                                placeholder=\"leave blank to keep same\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"confirmPassword\"\r\n                                label=\"Confirm Password\"\r\n                                type=\"password\"\r\n                                id=\"confirm-password\"\r\n                                autoComplete=\"current-password\"\r\n                                inputRef={passwordConfirmRef}\r\n                                placeholder=\"leave blank to keep same\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        disabled={loading}\r\n                    >\r\n                        Update\r\n                    </Button>\r\n                    <Grid container justifyContent=\"flex-end\">\r\n                        <Grid item>\r\n                            <Link to=\"/task-manager\" variant=\"body2\">\r\n                                Cancel\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n\r\n        </Container>\r\n    );\r\n}","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport { useRef, useState } from 'react';\r\nimport { InputAdornment, IconButton } from '@material-ui/core';\r\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function Signin() {\r\n  const classes = useStyles();\r\n\r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n  const { login } = useAuth();\r\n\r\n\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false)\r\n\r\n  const handleClickShowPassword = () => setShowPassword(!showPassword);\r\n  const handleMouseDownPassword = () => setShowPassword(!showPassword);\r\n\r\n  const history = useHistory()\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError(\"\")\r\n      setLoading(true)\r\n      await login(emailRef.current.value, passwordRef.current.value)\r\n      history.push(\"/task-manager\")\r\n    }\r\n    catch (e) {\r\n      console.log(e)\r\n      setError(\"Failed to log in\")\r\n    }\r\n    setLoading(false)\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n        {error && <Alert severity=\"error\">\r\n          <AlertTitle>Error</AlertTitle>\r\n          {error}\r\n        </Alert>}\r\n        <form className={classes.form} onSubmit={handleSubmit}>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"Email Address\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            autoFocus\r\n            inputRef={emailRef}\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type={showPassword ? \"text\" : \"password\"} \r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            inputRef={passwordRef}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    aria-label=\"toggle password visibility\"\r\n                    onClick={handleClickShowPassword}\r\n                    onMouseDown={handleMouseDownPassword}\r\n                  >\r\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            disabled={loading}\r\n          >\r\n            Sign In\r\n          </Button>\r\n          <Grid container>\r\n            <Grid item xs>\r\n              <Link to=\"/task-manager/forgot-password\" variant=\"body2\">\r\n                Forgot password?\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <Link to=\"/task-manager/signup\" variant=\"body2\">\r\n                {\"Don't have an account? Sign Up\"}\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useRef, useState } from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n\r\nexport default function Signup() {\r\n    const classes = useStyles()\r\n\r\n    const emailRef = useRef()\r\n    const passwordRef = useRef()\r\n    const passwordConfirmRef = useRef()\r\n    const { signup } = useAuth()\r\n\r\n    const [error, setError] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n    const history = useHistory()\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n            return setError(\"Passwords do not match\");\r\n        }\r\n\r\n        try {\r\n            setError(\"\")\r\n            setLoading(true)\r\n            await signup(emailRef.current.value, passwordRef.current.value)\r\n            history.push(\"/task-manager\")\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n            setError(\"Failed to create an account\")\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign up\r\n                </Typography>\r\n                {error && <Alert severity=\"error\">\r\n                    <AlertTitle>Error</AlertTitle>\r\n                    {error}\r\n                </Alert>}\r\n                <form className={classes.form} onSubmit={handleSubmit}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"Email Address\"\r\n                                name=\"email\"\r\n                                autoComplete=\"email\"\r\n                                inputRef={emailRef}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"password\"\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                                inputRef={passwordRef}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"confirmPassword\"\r\n                                label=\"Confirm Password\"\r\n                                type=\"password\"\r\n                                id=\"confirm-password\"\r\n                                autoComplete=\"current-password\"\r\n                                inputRef={passwordConfirmRef}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        disabled={loading}\r\n                    >\r\n                        Sign Up\r\n                    </Button>\r\n                    <Grid container justifyContent=\"flex-end\">\r\n                        <Grid item>\r\n                            <Link to=\"/task-manager/signin\" variant=\"body2\">\r\n                                Already have an account? Sign in\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n\r\n        </Container>\r\n    );\r\n}","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Link } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport { useRef, useState } from 'react';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function Signin() {\r\n  const classes = useStyles();\r\n\r\n  const emailRef = useRef();\r\n  const {resetPassword } = useAuth();\r\n\r\n\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [message, setMessage] = useState(\"\")\r\n\r\n  async function handleSubmit(e) {\r\n      e.preventDefault();   \r\n      try {\r\n          setMessage(\"\")\r\n          setError(\"\")\r\n          setLoading(true)\r\n          await resetPassword(emailRef.current.value)\r\n          setMessage('check your inbox for further instructions')\r\n      \r\n      }\r\n      catch(e) {\r\n          console.log(e)\r\n          setError(\"Failed to reset Password\")\r\n      }\r\n      setLoading(false)\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Reset Password\r\n        </Typography>\r\n        {error && <Alert severity=\"error\">\r\n          <AlertTitle>Error</AlertTitle>\r\n          {error}\r\n        </Alert>}\r\n        {message && <Alert severity=\"success\">\r\n          <AlertTitle>Success</AlertTitle>\r\n          {message}\r\n         </Alert>   }\r\n        <form className={classes.form} onSubmit={handleSubmit}>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"Email Address\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            autoFocus\r\n            inputRef={emailRef}\r\n          />\r\n        \r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            disabled={loading}\r\n          >\r\n            Reset Password\r\n          </Button>\r\n          <Grid container>\r\n            <Grid item xs>\r\n              <Link to=\"/task-manager/signin\" variant=\"body2\">\r\n                Sign In\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <Link to=\"/task-manager/signup\" variant=\"body2\">\r\n                {\"Don't have an account? Sign Up\"}\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}","import React from 'react'\r\nimport { useState } from 'react';\r\nimport { AppBar, makeStyles, Toolbar, Typography, CssBaseline, IconButton, Menu, MenuItem } from '@material-ui/core'\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\n\r\nexport default function Nav() {\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        grow: {\r\n            flexGrow: 1\r\n        },\r\n        email: {\r\n            padding: \"4%\"\r\n        },\r\n        appbar: {\r\n            background: \"#b80751\"\r\n        }\r\n    }));\r\n\r\n    const classes = useStyles();\r\n    const [anchorEl, open] = useState(null)\r\n\r\n    const handleMenu = (event) => {\r\n        open(event.currentTarget)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        open(null)\r\n    }\r\n\r\n\r\n    const [error, setError] = useState(\"\")\r\n    const { currentUser, logout } = useAuth()\r\n    const history = useHistory()\r\n\r\n    async function handleLogout() {\r\n        setError(\"\")\r\n        try {\r\n            await logout()\r\n            history.pushState(\"/task-manager/signin\")\r\n\r\n        } catch {\r\n            setError(\"Failed to log out\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={classes.appbar}\r\n            >\r\n                <Toolbar >\r\n                    <Typography align=\"center\" variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n                        Task Manager\r\n                    </Typography>\r\n                    <IconButton\r\n                        area-haspopup=\"true\"\r\n                        color=\"inherit\"\r\n                        onClick={handleMenu}\r\n                    >\r\n                        <AccountCircle />\r\n                    </IconButton>\r\n\r\n                    <Menu\r\n                        id=\"menu-appbar\"\r\n                        aria-controls=\"fade-menu\"\r\n                        keepMounted\r\n                        anchorEl={anchorEl}\r\n                        anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                        transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                        open={Boolean(anchorEl)}\r\n                        onClose={handleClose}\r\n                    >\r\n                        <p className={classes.email}>Email : {currentUser.email} </p><hr></hr>\r\n                        <MenuItem component={Link} to=\"task-manager/update-profile\" >Update Profile</MenuItem>\r\n                        <MenuItem onClick={handleLogout}>Log Out</MenuItem>\r\n                    </Menu>\r\n                </Toolbar>\r\n\r\n            </AppBar>\r\n            {error && <Alert severity=\"error\">\r\n                <AlertTitle>Error</AlertTitle>\r\n                {error}\r\n            </Alert>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/reminder.32531d2d.mp3\";","import React, { Fragment, useState, useEffect } from 'react'\r\nimport { makeStyles, TextField, Button } from '@material-ui/core';\r\nimport Sound from 'react-sound';\r\nimport reminderSong from \"../songs/reminder.mp3\"\r\n\r\nexport default function AddTaskText() {\r\n\r\n    let initTasksArray;\r\n    if (localStorage.getItem(\"tasks\") === null) {\r\n        initTasksArray = [];\r\n    }\r\n    else {\r\n        initTasksArray = JSON.parse(localStorage.getItem(\"tasks\"));\r\n    }\r\n\r\n    const useStyles = makeStyles(theme => ({\r\n        textfield: {\r\n            width: \"60vw\"\r\n        },\r\n        addContainer: {\r\n            display: \"flex\",\r\n            marginTop: \"15vh\",\r\n            justifyContent: \"center\"\r\n        },\r\n\r\n        addTaskBtn: {\r\n            marginLeft: \"2vw\",\r\n        },\r\n        noTask: {\r\n            color: \"#3f51b5\",\r\n            textAlign: \"center\",\r\n            marginTop: \"10vh\"\r\n        },\r\n        tasksTable: {\r\n            margin: \"5vh auto\",\r\n            color: \"#3f51b5\"\r\n        },\r\n        actionBtn: {\r\n            margin: \"0 1vw\"\r\n        }\r\n    }));\r\n\r\n    const classes = useStyles()\r\n    const [currentTask, setCurrentTask] = useState(\"\")\r\n    const [taskBeingEdited, setTaskBeingEdited] = useState(\"\")\r\n    const [taskArray, setTaskArray] = useState(initTasksArray)\r\n    const [playSong, setPlaySong] = useState(false)\r\n\r\n\r\n    // const [ifDisplayUndone, setIfDisplayUndone] = useState(false)\r\n\r\n    const handleTaskChange = (e) => {\r\n        setCurrentTask(e.target.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        let newTask = {\r\n            id: taskArray.length === 0 ? 1 : taskArray[taskArray.length - 1].id + 1,\r\n            taskName: currentTask,\r\n            isEditing: false,\r\n            isDone: false\r\n        }\r\n\r\n        setTaskArray([...taskArray, newTask])\r\n        setCurrentTask(\"\")\r\n        setPlaySong(true)\r\n    }\r\n\r\n    const handleEditTaskTextField = (task) => {\r\n        setTaskBeingEdited(task)\r\n    }\r\n    const saveEditTask = (task) => {\r\n\r\n\r\n        setTaskArray(taskArray.map((element) => {\r\n            if (element.id === task.id) {\r\n                element.taskName = taskBeingEdited\r\n            }\r\n            return element\r\n\r\n        }))\r\n        setTaskArray(taskArray.map(element => {\r\n            if (element.id === task.id) {\r\n                element.isEditing = false\r\n            }\r\n            return element\r\n        }))\r\n        setTaskBeingEdited(\"\")\r\n    }\r\n\r\n    const editTask = (task) => {\r\n        setTaskArray(taskArray.map(element => {\r\n            if (element.id === task.id) {\r\n                element.isEditing = true\r\n            }\r\n            return element\r\n        }))\r\n        setTaskBeingEdited(task.taskName)\r\n    }\r\n\r\n    const cancelEdit = (task) => {\r\n        setTaskArray(taskArray.map(element => {\r\n            if (element.id === task.id) {\r\n                element.isEditing = false\r\n            }\r\n            return element\r\n        }))\r\n    }\r\n    const doneTask = (task) => {\r\n        setTaskArray(taskArray.map(element => {\r\n            if (element.id === task.id) {\r\n                element.isDone = true\r\n            }\r\n            return element\r\n        }))\r\n        // setIfDisplayUndone(true)\r\n    }\r\n\r\n    const UndoneTask = (task) => {\r\n        setTaskArray(taskArray.map(element => {\r\n            if (element.id === task.id) {\r\n                element.isDone = false\r\n            }\r\n            return element\r\n        }))\r\n        // setIfDisplayUndone(false)\r\n    }\r\n    const deleteTask = (task) => {\r\n        setTaskArray(taskArray.filter((element) => {\r\n            return element !== task\r\n        }))\r\n\r\n        // localStorage.setItem(\"tasks\", JSON.stringify(taskArray));\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(taskArray));\r\n    }, [taskArray])\r\n    return (\r\n        <>\r\n            <Fragment >\r\n                <div className={classes.addContainer}>\r\n                    <TextField\r\n                        className={classes.textfield}\r\n                        // InputLabelProps={{\r\n                        //     classes: {\r\n                        //         root: classes.inputLabel,\r\n                        //         focused: \"focused\"\r\n                        //     }\r\n                        // }}\r\n                        // InputProps={{\r\n                        //     className: classes.multilineColor\r\n                        // }}\r\n                        label=\"ADD TASK\"\r\n                        variant=\"filled\"\r\n                        value={currentTask}\r\n                        onChange={handleTaskChange}\r\n                    />\r\n\r\n                    <Button className={classes.addTaskBtn} variant=\"contained\" color=\"primary\"\r\n                        onClick={addTask} disabled={currentTask === \"\"} >\r\n                        ADD\r\n                    </Button>\r\n                </div>\r\n                {taskArray.length > 0 ?\r\n                    <table className={classes.tasksTable}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Task</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        {\r\n                            taskArray.map((task) => {\r\n                                return (\r\n                                    <tbody key={task.id}>\r\n                                        <tr>\r\n                                            <td>\r\n                                                {task.isEditing ? (\r\n                                                    <TextField\r\n                                                        id=\"standard-basic\"\r\n                                                        value={taskBeingEdited}\r\n                                                        onChange={e => handleEditTaskTextField(e.target.value)}\r\n\r\n                                                    />\r\n                                                ) : task.isDone ? (\r\n                                                    <s>{task.taskName}</s>\r\n                                                ) : (\r\n                                                    <span>{task.taskName}</span>\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                {task.isEditing ? (\r\n                                                    <>\r\n                                                        <Button className={classes.actionBtn}\r\n                                                            variant=\"outlined\"\r\n                                                            color=\"primary\"\r\n                                                            size=\"small\"\r\n                                                            disabled={taskBeingEdited === \"\"}\r\n                                                            onClick={() => saveEditTask(task)}\r\n                                                        >Save</Button>\r\n\r\n                                                        <Button className={classes.actionBtn}\r\n                                                            variant=\"outlined\"\r\n                                                            color=\"secondary\"\r\n                                                            size=\"small\"\r\n                                                            onClick={() => cancelEdit(task)}\r\n                                                        >Cancel</Button>\r\n                                                    </>\r\n                                                ) :\r\n                                                    (\r\n                                                        <>\r\n                                                            <Button className={classes.actionBtn}\r\n                                                                variant=\"outlined\"\r\n                                                                color=\"primary\"\r\n                                                                size=\"small\"\r\n                                                                onClick={e => editTask(task)}\r\n                                                            >EDIT</Button>\r\n\r\n                                                            {!task.isDone ? <Button className={classes.actionBtn}\r\n                                                                variant=\"outlined\"\r\n                                                                color=\"default\"\r\n                                                                size=\"small\"\r\n                                                                // disabled={task.isDone}\r\n                                                                onClick={() => doneTask(task)}\r\n                                                            >DONE</Button>\r\n                                                                : <Button className={classes.actionBtn}\r\n                                                                    variant=\"outlined\"\r\n                                                                    color=\"default\"\r\n                                                                    size=\"small\"\r\n                                                                    // disabled={task.isDone}\r\n                                                                    onClick={() => UndoneTask(task)}\r\n                                                                >UNDONE</Button>\r\n                                                            }\r\n\r\n                                                            <Button className={classes.actionBtn}\r\n                                                                variant=\"outlined\"\r\n                                                                color=\"secondary\"\r\n                                                                size=\"small\"\r\n                                                                onClick={() => deleteTask(task)}\r\n                                                            >DELETE</Button>\r\n                                                        </>\r\n                                                    )\r\n\r\n                                                }\r\n                                            </td>\r\n                                        </tr>\r\n\r\n                                    </tbody>\r\n                                )\r\n                            })\r\n                        }\r\n                    </table>\r\n                    : <h2 className={classes.noTask}> NO TASKS TO DO </h2>\r\n                }\r\n\r\n            </Fragment>\r\n\r\n\r\n            <Sound\r\n            url = {reminderSong}\r\n            playStatus = { playSong ? Sound.status.PLAYING : Sound.status.STOPPED }\r\n            // playFromPosition = { 300 /* in milliseconds */}\r\n            // onLoading = { handleSongLoading }\r\n            // onPlaying = { handleSongPlaying }\r\n            // onFinishedPlaying = { handleSongFinishedPlaying }\r\n              />\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n","\r\nimport React from 'react'\r\nimport Nav from './Nav'\r\nimport AddTaskText from './AddTaskText'\r\n\r\nexport default function Dashboard() {\r\n    return (\r\n        < >\r\n            <Nav />\r\n            <AddTaskText />      \r\n        </>\r\n    )\r\n}\r\n","import React, { Fragment } from \"react\";\nimport { AuthProvider } from \"../context/AuthContext\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport PrivateRoute from \"./PrivateRoute\";\nimport UpdateProfile from \"./UpdateProfile\";\nimport Signin from \"./Signin\";\nimport Signup from \"./Signup\";\nimport ForgotPassword from \"./ForgotPassword\"\nimport Dashboard from \"./Dashboard\";\n\nfunction App() {\n  return (\n    <>\n      <Fragment>\n        <Router>\n          <AuthProvider>\n            <Switch>\n              <PrivateRoute exact path=\"/task-manager/\" component={Dashboard} />\n              <PrivateRoute exact path=\"/task-manager/update-profile\" component={UpdateProfile} />\n              <Route path=\"/task-manager/signup\" component={Signup} />\n              <Route path=\"/task-manager/signin\" component={Signin} />\n              <Route path=\"/task-manager/forgot-password\" component={ForgotPassword} />\n            </Switch>\n          </AuthProvider>\n        </Router>\n      </Fragment>\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/App\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}