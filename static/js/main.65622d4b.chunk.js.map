{"version":3,"sources":["firebase.js","context/AuthContext.js","components/PrivateRoute.js","components/form.elements.js","components/UpdateProfile.js","components/Signin.js","components/Signup.js","components/ForgotPassword.js","components/Nav.elements.js","components/Nav.js","songs/reminder.mp3","components/Tasks.elements.js","components/Tasks.js","components/Dashboard.js","components/App.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","useEffect","onAuthStateChanged","user","value","login","email","password","signInWithEmailAndPassword","signup","createUserWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","updateEmail","updatePassword","Provider","PrivateRoute","Component","component","rest","render","props","to","Form","styled","form","StyledBtn","Button","LockIcon","Avatar","FormContainer","div","Signup","emailRef","useRef","passwordRef","passwordConfirmRef","error","setError","history","useHistory","Container","maxWidth","CssBaseline","Typography","variant","Alert","severity","AlertTitle","onSubmit","e","preventDefault","current","promises","push","Promise","all","then","catch","finally","Grid","container","spacing","item","xs","TextField","required","fullWidth","id","label","name","autoComplete","inputRef","defaultValue","type","placeholder","color","disabled","justifyContent","Signin","showPassword","setShowPassword","a","console","log","margin","autoFocus","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","Visibility","VisibilityOff","message","setMessage","Heading","DisplayMail","p","AppBarWithBackground","AppBar","Nav","anchorEl","open","pushState","Toolbar","align","event","currentTarget","Menu","keepMounted","anchorOrigin","vertical","horizontal","transformOrigin","Boolean","onClose","MenuItem","Link","AddTaskTextField","AddTaskContainer","AddTaskBtn","NoTasksHeading","h2","TaskTable","table","ActionBtn","Tasks","initTasksArray","localStorage","getItem","JSON","parse","currentTask","setCurrentTask","taskBeingEdited","setTaskBeingEdited","taskArray","setTaskArray","playSong","setItem","stringify","onChange","target","newTask","length","taskName","isEditing","isDone","map","task","handleEditTaskTextField","size","element","saveEditTask","cancelEdit","editTask","UndoneTask","doneTask","filter","deleteTask","url","reminderSong","playStatus","Sound","status","PLAYING","STOPPED","Dashboard","App","exact","path","UpdateProfile","ForgotPassword","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65622d4b.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\n\r\nconst app = firebase.initializeApp({\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID\r\n})\r\n\r\nexport const auth = app.auth()\r\nexport default app","import React, { useContext, useState, useEffect } from 'react'\r\nimport { auth } from '../firebase';\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nexport function useAuth() {\r\n    return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n\r\n    const [currentUser, setCurrentUser] = useState();\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    function signup(email, password) {\r\n        return auth.createUserWithEmailAndPassword(email, password)\r\n    }\r\n\r\n    function login(email, password) {\r\n        return auth.signInWithEmailAndPassword(email, password)\r\n    }\r\n\r\n    function logout() {\r\n        return auth.signOut()\r\n    }\r\n\r\n    function updateEmail(email) {\r\n        return currentUser.updateEmail(email)\r\n    }\r\n\r\n    function updatePassword(password) {\r\n        return currentUser.updatePassword(password)\r\n    }\r\n\r\n\r\n    function resetPassword(email) {\r\n        return auth.sendPasswordResetEmail(email)\r\n    }\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(user => {\r\n            setCurrentUser(user)\r\n            setLoading(false)\r\n        })\r\n\r\n        return unsubscribe\r\n    }, [])\r\n\r\n\r\n    const value = {\r\n        currentUser,\r\n        login,\r\n        signup,\r\n        logout,\r\n        resetPassword,\r\n        updateEmail,\r\n        updatePassword\r\n    }\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Redirect, Route } from 'react-router'\r\nimport { useAuth } from '../context/AuthContext'\r\n\r\nexport default function PrivateRoute( {component : Component , ...rest}) {\r\n\r\n    const {currentUser} = useAuth()\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props => {\r\n              return currentUser ? <Component {...props} /> : <Redirect to=\"/task-manager/signin\" />\r\n            }}\r\n        ></Route>\r\n    )\r\n}\r\n","import styled from 'styled-components';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nexport const Form = styled.form`\r\n  width: 100%;\r\n  margin-top: 2vh;\r\n`\r\n\r\nexport const StyledBtn = styled(Button)`\r\n    &&& {\r\n    margin : 2vh 0;\r\n    }\r\n`\r\n\r\nexport const LockIcon = styled(Avatar)`\r\n&&& {\r\n    margin : 1vh;\r\n    background-color : #f50057;\r\n}\r\n`\r\n\r\nexport const FormContainer = styled.div`\r\n  margin-top: 8vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`","import React from 'react';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useRef, useState } from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nimport { Form, StyledBtn , LockIcon,FormContainer } from './form.elements';\r\n\r\n\r\nexport default function Signup() {\r\n    \r\n\r\n    const emailRef = useRef();\r\n    const passwordRef = useRef();\r\n    const passwordConfirmRef = useRef();\r\n    const { currentUser, updatePassword, updateEmail } = useAuth();\r\n    const [error, setError] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const history = useHistory()\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n            return setError(\"Passwords do not match\");\r\n        }\r\n\r\n        const promises = []\r\n        setLoading(true)\r\n        setError(\"\")\r\n        if (emailRef.current.value !== currentUser.email) {\r\n            promises.push(updateEmail(emailRef.current.value))\r\n        }\r\n\r\n        if (passwordRef.current.value) {\r\n            promises.push(updatePassword(passwordRef.current.value))\r\n        }\r\n\r\n        Promise.all(promises).then(() => {\r\n            history.push(\"/task-manager\")\r\n        }).catch(() => {\r\n            setError(\"Failed to update profile\")\r\n        }).finally(() => {\r\n            setLoading(false)\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <FormContainer>\r\n                <LockIcon >\r\n                    <LockOutlinedIcon />\r\n                </LockIcon>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Update Profile\r\n                </Typography>\r\n                {error && <Alert severity=\"error\">\r\n                    <AlertTitle>Error</AlertTitle>\r\n                    {error}\r\n                </Alert>}\r\n                <Form  onSubmit={handleSubmit}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"Email Address\"\r\n                                name=\"email\"\r\n                                autoComplete=\"email\"\r\n                                inputRef={emailRef}\r\n                                defaultValue={currentUser.email}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"password\"\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                                inputRef={passwordRef}\r\n                                placeholder=\"leave blank to keep same\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"confirmPassword\"\r\n                                label=\"Confirm Password\"\r\n                                type=\"password\"\r\n                                id=\"confirm-password\"\r\n                                autoComplete=\"current-password\"\r\n                                inputRef={passwordConfirmRef}\r\n                                placeholder=\"leave blank to keep same\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <StyledBtn\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={loading}\r\n                    >\r\n                        Update\r\n                    </StyledBtn>\r\n                    <Grid container justifyContent=\"flex-end\">\r\n                        <Grid item>\r\n                            <Link to=\"/task-manager\" variant=\"body2\">\r\n                                Cancel\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Form>\r\n            </FormContainer>\r\n\r\n        </Container>\r\n    );\r\n}","import React from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport { useRef, useState } from 'react';\r\nimport { InputAdornment, IconButton } from '@material-ui/core';\r\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\r\n\r\nimport { Form, StyledBtn , LockIcon,FormContainer } from './form.elements';\r\n\r\n\r\n\r\nexport default function Signin() {\r\n \r\n\r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n  const { login } = useAuth();\r\n\r\n\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false)\r\n\r\n  const handleClickShowPassword = () => setShowPassword(!showPassword);\r\n  const handleMouseDownPassword = () => setShowPassword(!showPassword);\r\n\r\n  const history = useHistory()\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError(\"\")\r\n      setLoading(true)\r\n      await login(emailRef.current.value, passwordRef.current.value)\r\n      history.push(\"/task-manager\")\r\n    }\r\n    catch (e) {\r\n      console.log(e)\r\n      setError(\"Failed to log in\")\r\n    }\r\n    setLoading(false)\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <FormContainer>\r\n        <LockIcon >\r\n          <LockOutlinedIcon />\r\n        </LockIcon>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n        {error && <Alert severity=\"error\">\r\n          <AlertTitle>Error</AlertTitle>\r\n          {error}\r\n        </Alert>}\r\n        <Form onSubmit={handleSubmit}>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"Email Address\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            autoFocus\r\n            inputRef={emailRef}\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type={showPassword ? \"text\" : \"password\"}\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            inputRef={passwordRef}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    aria-label=\"toggle password visibility\"\r\n                    onClick={handleClickShowPassword}\r\n                    onMouseDown={handleMouseDownPassword}\r\n                  >\r\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n\r\n          />\r\n          <StyledBtn\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={loading}\r\n          >\r\n            Sign In\r\n          </StyledBtn>\r\n          <Grid container>\r\n            <Grid item xs>\r\n              <Link to=\"/task-manager/forgot-password\" variant=\"body2\">\r\n                Forgot password?\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <Link to=\"/task-manager/signup\" variant=\"body2\">\r\n                {\"Don't have an account? Sign Up\"}\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </Form>\r\n      </FormContainer>\r\n    </Container>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useRef, useState } from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nimport { Form, StyledBtn , LockIcon,FormContainer } from './form.elements';\r\n\r\n\r\nexport default function Signup() {\r\n\r\n\r\n    const emailRef = useRef()\r\n    const passwordRef = useRef()\r\n    const passwordConfirmRef = useRef()\r\n    const { signup } = useAuth()\r\n\r\n    const [error, setError] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n    const history = useHistory()\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n            return setError(\"Passwords do not match\");\r\n        }\r\n\r\n        try {\r\n            setError(\"\")\r\n            setLoading(true)\r\n            await signup(emailRef.current.value, passwordRef.current.value)\r\n            history.push(\"/task-manager\")\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n            setError(\"Failed to create an account\")\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <FormContainer>\r\n                <LockIcon>\r\n                    <LockOutlinedIcon />\r\n                </LockIcon>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign up\r\n                </Typography>\r\n                {error && <Alert severity=\"error\">\r\n                    <AlertTitle>Error</AlertTitle>\r\n                    {error}\r\n                </Alert>}\r\n                <Form onSubmit={handleSubmit}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"Email Address\"\r\n                                name=\"email\"\r\n                                autoComplete=\"email\"\r\n                                inputRef={emailRef}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"password\"\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                                inputRef={passwordRef}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"confirmPassword\"\r\n                                label=\"Confirm Password\"\r\n                                type=\"password\"\r\n                                id=\"confirm-password\"\r\n                                autoComplete=\"current-password\"\r\n                                inputRef={passwordConfirmRef}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <StyledBtn\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={loading}\r\n                    >\r\n                        Sign Up\r\n                    </StyledBtn>\r\n                    <Grid container justifyContent=\"flex-end\">\r\n                        <Grid item>\r\n                            <Link to=\"/task-manager/signin\" variant=\"body2\">\r\n                                Already have an account? Sign in\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Form>\r\n            </FormContainer>\r\n\r\n        </Container>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport { Link } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport { useRef, useState } from 'react';\r\nimport { Form, StyledBtn , LockIcon,FormContainer } from './form.elements';\r\n\r\n\r\n\r\nexport default function Signin() {\r\n  \r\n  const emailRef = useRef();\r\n  const {resetPassword } = useAuth();\r\n\r\n\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [message, setMessage] = useState(\"\")\r\n\r\n  async function handleSubmit(e) {\r\n      e.preventDefault();   \r\n      try {\r\n          setMessage(\"\")\r\n          setError(\"\")\r\n          setLoading(true)\r\n          await resetPassword(emailRef.current.value)\r\n          setMessage('check your inbox for further instructions')\r\n      \r\n      }\r\n      catch(e) {\r\n          console.log(e)\r\n          setError(\"Failed to reset Password\")\r\n      }\r\n      setLoading(false)\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <FormContainer>\r\n        <LockIcon >\r\n          <LockOutlinedIcon />\r\n        </LockIcon>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Reset Password\r\n        </Typography>\r\n        {error && <Alert severity=\"error\">\r\n          <AlertTitle>Error</AlertTitle>\r\n          {error}\r\n        </Alert>}\r\n        {message && <Alert severity=\"success\">\r\n          <AlertTitle>Success</AlertTitle>\r\n          {message}\r\n         </Alert>   }\r\n        <Form  onSubmit={handleSubmit}>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"Email Address\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            autoFocus\r\n            inputRef={emailRef}\r\n          />\r\n        \r\n          <StyledBtn\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={loading}\r\n          >\r\n            Reset Password\r\n          </StyledBtn>\r\n          <Grid container>\r\n            <Grid item xs>\r\n              <Link to=\"/task-manager/signin\" variant=\"body2\">\r\n                Sign In\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <Link to=\"/task-manager/signup\" variant=\"body2\">\r\n                {\"Don't have an account? Sign Up\"}\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </Form>\r\n      </FormContainer>\r\n    </Container>\r\n  );\r\n}","import styled from 'styled-components';\r\nimport { Typography,AppBar } from '@material-ui/core';\r\n\r\n\r\n\r\nexport const Heading = styled(Typography)`\r\n  flex-grow : 1;\r\n`\r\n\r\nexport const DisplayMail = styled.p`\r\n    padding: 4%;\r\n`\r\nexport const AppBarWithBackground = styled(AppBar)`\r\n    background: #b80751;\r\n`","import React from 'react'\r\nimport { useState } from 'react';\r\nimport { Toolbar, CssBaseline, IconButton, Menu, MenuItem } from '@material-ui/core'\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\n\r\nimport { Heading,DisplayMail,AppBarWithBackground } from './Nav.elements';\r\nexport default function Nav() {\r\n\r\n\r\n    const [anchorEl, open] = useState(null)\r\n\r\n    const handleMenu = (event) => {\r\n        open(event.currentTarget)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        open(null)\r\n    }\r\n\r\n\r\n    const [error, setError] = useState(\"\")\r\n    const { currentUser, logout } = useAuth()\r\n    const history = useHistory()\r\n\r\n    async function handleLogout() {\r\n        setError(\"\")\r\n        try {\r\n            await logout()\r\n            history.pushState(\"/task-manager/signin\")\r\n\r\n        } catch {\r\n            setError(\"Failed to log out\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <CssBaseline />\r\n\r\n            <AppBarWithBackground\r\n                position=\"fixed\"\r\n                \r\n            >\r\n                <Toolbar >\r\n                    <Heading align=\"center\" variant=\"h6\" color=\"inherit\" >\r\n                        Task Manager\r\n                    </Heading>\r\n                    <IconButton\r\n                        area-haspopup=\"true\"\r\n                        color=\"inherit\"\r\n                        onClick={handleMenu}\r\n                    >\r\n                        <AccountCircle />\r\n                    </IconButton>\r\n\r\n                    <Menu\r\n                        id=\"menu-appbar\"\r\n                        aria-controls=\"fade-menu\"\r\n                        keepMounted\r\n                        anchorEl={anchorEl}\r\n                        anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                        transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                        open={Boolean(anchorEl)}\r\n                        onClose={handleClose}\r\n                    >\r\n                        <DisplayMail >Email : {currentUser.email} </DisplayMail><hr></hr>\r\n                        <MenuItem component={Link} to=\"task-manager/update-profile\" >Update Profile</MenuItem>\r\n                        <MenuItem onClick={handleLogout}>Log Out</MenuItem>\r\n                    </Menu>\r\n                </Toolbar>\r\n\r\n            </AppBarWithBackground>\r\n            {error && <Alert severity=\"error\">\r\n                <AlertTitle>Error</AlertTitle>\r\n                {error}\r\n            </Alert>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/reminder.32531d2d.mp3\";","import styled from 'styled-components';\r\nimport { TextField, Button } from '@material-ui/core';\r\n\r\nexport const AddTaskTextField = styled(TextField)`\r\n    width: 60vw;\r\n`\r\n\r\nexport const AddTaskContainer = styled.div`\r\n     display: flex;\r\n    margin-top: 15vh;\r\n    justify-content: center;\r\n`\r\n\r\nexport const AddTaskBtn = styled(Button)`\r\n    margin-left : 2vw;\r\n`\r\nexport const NoTasksHeading = styled.h2`\r\n     color: #3f51b5;\r\n    text-align: center;\r\n    margin-top: 10vh;\r\n`\r\n\r\nexport const TaskTable = styled.table`\r\n    margin: 5vh auto;\r\n    color: #3f51b5;\r\n`\r\n\r\nexport const ActionBtn = styled(Button)`\r\n      margin: 0 1vw;\r\n`","import React, { Fragment, useState, useEffect } from 'react'\r\nimport {  TextField, Button } from '@material-ui/core';\r\nimport Sound from 'react-sound';\r\nimport reminderSong from \"../songs/reminder.mp3\"\r\n\r\nimport { AddTaskTextField,AddTaskContainer,AddTaskBtn,NoTasksHeading,TaskTable ,ActionBtn} from './Tasks.elements';\r\nexport default function Tasks() {\r\n\r\n    let initTasksArray;\r\n    if (localStorage.getItem(\"tasks\") === null) {\r\n        initTasksArray = [];\r\n    }\r\n    else {\r\n        initTasksArray = JSON.parse(localStorage.getItem(\"tasks\"));\r\n    }\r\n\r\n    const [currentTask, setCurrentTask] = useState(\"\")\r\n    const [taskBeingEdited, setTaskBeingEdited] = useState(\"\")\r\n    const [taskArray, setTaskArray] = useState(initTasksArray)\r\n    const [playSong, setPlaySong] = useState(false)\r\n\r\n\r\n    // const [ifDisplayUndone, setIfDisplayUndone] = useState(false)\r\n\r\n    \r\n\r\n    const handleTaskChange = (e) => {\r\n        setCurrentTask(e.target.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        let newTask = {\r\n            id: taskArray.length === 0 ? 1 : taskArray[taskArray.length - 1].id + 1,\r\n            taskName: currentTask,\r\n            isEditing: false,\r\n            isDone: false\r\n        }\r\n\r\n        setTaskArray([...taskArray, newTask])\r\n        setCurrentTask(\"\")\r\n        // setPlaySong(true)\r\n    }\r\n\r\n    const handleEditTaskTextField = (task) => {\r\n        setTaskBeingEdited(task)\r\n    }\r\n    const saveEditTask = (task) => {\r\n\r\n\r\n        setTaskArray(taskArray.map((element) => {\r\n            if (element.id === task.id) {\r\n                element.taskName = taskBeingEdited\r\n            }\r\n            return element\r\n\r\n        }))\r\n        setTaskArray(taskArray.map(element => {\r\n            if (element.id === task.id) {\r\n                element.isEditing = false\r\n            }\r\n            return element\r\n        }))\r\n        setTaskBeingEdited(\"\")\r\n    }\r\n\r\n    const editTask = (task) => {\r\n        setTaskArray(taskArray.map(element => {\r\n            if (element.id === task.id) {\r\n                element.isEditing = true\r\n            }\r\n            return element\r\n        }))\r\n        setTaskBeingEdited(task.taskName)\r\n    }\r\n\r\n    const cancelEdit = (task) => {\r\n        setTaskArray(taskArray.map(element => {\r\n            if (element.id === task.id) {\r\n                element.isEditing = false\r\n            }\r\n            return element\r\n        }))\r\n    }\r\n    const doneTask = (task) => {\r\n        setTaskArray(taskArray.map(element => {\r\n            if (element.id === task.id) {\r\n                element.isDone = true\r\n            }\r\n            return element\r\n        }))\r\n        // setIfDisplayUndone(true)\r\n    }\r\n\r\n    const UndoneTask = (task) => {\r\n        setTaskArray(taskArray.map(element => {\r\n            if (element.id === task.id) {\r\n                element.isDone = false\r\n            }\r\n            return element\r\n        }))\r\n        // setIfDisplayUndone(false)\r\n    }\r\n    const deleteTask = (task) => {\r\n        setTaskArray(taskArray.filter((element) => {\r\n            return element !== task\r\n        }))\r\n\r\n        // localStorage.setItem(\"tasks\", JSON.stringify(taskArray));\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(taskArray));\r\n    }, [taskArray])\r\n    return (\r\n        <>\r\n            <Fragment >\r\n                <AddTaskContainer >\r\n                    <AddTaskTextField\r\n                        \r\n                        // InputLabelProps={{\r\n                        //     classes: {\r\n                        //         root: classes.inputLabel,\r\n                        //         focused: \"focused\"\r\n                        //     }\r\n                        // }}\r\n                        // InputProps={{\r\n                        //     className: classes.multilineColor\r\n                        // }}\r\n                        label=\"ADD TASK\"\r\n                        variant=\"filled\"\r\n                        value={currentTask}\r\n                        onChange={handleTaskChange}\r\n                    />\r\n\r\n                    <AddTaskBtn variant=\"contained\" color=\"primary\"\r\n                        onClick={addTask} disabled={currentTask === \"\"} >\r\n                        ADD\r\n                    </AddTaskBtn>\r\n                </AddTaskContainer>\r\n                {taskArray.length > 0 ?\r\n                    <TaskTable >\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Task</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        {\r\n                            taskArray.map((task) => {\r\n                                return (\r\n                                    <tbody key={task.id}>\r\n                                        <tr>\r\n                                            <td>\r\n                                                {task.isEditing ? (\r\n                                                    <TextField\r\n                                                        id=\"standard-basic\"\r\n                                                        value={taskBeingEdited}\r\n                                                        onChange={e => handleEditTaskTextField(e.target.value)}\r\n\r\n                                                    />\r\n                                                ) : task.isDone ? (\r\n                                                    <s>{task.taskName}</s>\r\n                                                ) : (\r\n                                                    <span>{task.taskName}</span>\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                {task.isEditing ? (\r\n                                                    <>\r\n                                                        <ActionBtn \r\n                                                            variant=\"outlined\"\r\n                                                            color=\"primary\"\r\n                                                            size=\"small\"\r\n                                                            disabled={taskBeingEdited === \"\"}\r\n                                                            onClick={() => saveEditTask(task)}\r\n                                                        >Save</ActionBtn>\r\n\r\n                                                        <ActionBtn \r\n                                                            variant=\"outlined\"\r\n                                                            color=\"secondary\"\r\n                                                            size=\"small\"\r\n                                                            onClick={() => cancelEdit(task)}\r\n                                                        >Cancel</ActionBtn>\r\n                                                    </>\r\n                                                ) :\r\n                                                    (\r\n                                                        <>\r\n                                                            <ActionBtn \r\n                                                                variant=\"outlined\"\r\n                                                                color=\"primary\"\r\n                                                                size=\"small\"\r\n                                                                onClick={e => editTask(task)}\r\n                                                            >EDIT</ActionBtn>\r\n\r\n                                                            {!task.isDone ? <ActionBtn \r\n                                                                variant=\"outlined\"\r\n                                                                color=\"default\"\r\n                                                                size=\"small\"\r\n                                                                // disabled={task.isDone}\r\n                                                                onClick={() => doneTask(task)}\r\n                                                            >DONE</ActionBtn>\r\n                                                                : <ActionBtn \r\n                                                                    variant=\"outlined\"\r\n                                                                    color=\"default\"\r\n                                                                    size=\"small\"\r\n                                                                    // disabled={task.isDone}\r\n                                                                    onClick={() => UndoneTask(task)}\r\n                                                                >UNDONE</ActionBtn>\r\n                                                            }\r\n\r\n                                                            <ActionBtn \r\n                                                                variant=\"outlined\"\r\n                                                                color=\"secondary\"\r\n                                                                size=\"small\"\r\n                                                                onClick={() => deleteTask(task)}\r\n                                                            >DELETE</ActionBtn>\r\n                                                        </>\r\n                                                    )\r\n\r\n                                                }\r\n                                            </td>\r\n                                        </tr>\r\n\r\n                                    </tbody>\r\n                                )\r\n                            })\r\n                        }\r\n                    </TaskTable>\r\n                    : <NoTasksHeading> NO TASKS TO DO </NoTasksHeading>\r\n                }\r\n\r\n            </Fragment>\r\n\r\n\r\n            <Sound\r\n            url = {reminderSong}\r\n            playStatus = { playSong ? Sound.status.PLAYING : Sound.status.STOPPED }\r\n            // playFromPosition = { 300 /* in milliseconds */}\r\n            // onLoading = { handleSongLoading }\r\n            // onPlaying = { handleSongPlaying }\r\n            // onFinishedPlaying = { handleSongFinishedPlaying }\r\n              />\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n","\r\nimport React from 'react'\r\nimport Nav from './Nav'\r\nimport Tasks from './Tasks'\r\n\r\nexport default function Dashboard() {\r\n    return (\r\n        < >\r\n            <Nav />\r\n            <Tasks />      \r\n        </>\r\n    )\r\n}\r\n","import React, { Fragment } from \"react\";\nimport { AuthProvider } from \"../context/AuthContext\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport PrivateRoute from \"./PrivateRoute\";\nimport UpdateProfile from \"./UpdateProfile\";\nimport Signin from \"./Signin\";\nimport Signup from \"./Signup\";\nimport ForgotPassword from \"./ForgotPassword\"\nimport Dashboard from \"./Dashboard\";\n\nfunction App() {\n  return (\n    <>\n      <Fragment>\n        <Router>\n          <AuthProvider>\n            <Switch>\n              <PrivateRoute exact path=\"/task-manager/\" component={Dashboard} />\n              <PrivateRoute exact path=\"/task-manager/update-profile\" component={UpdateProfile} />\n              <Route path=\"/task-manager/signup\" component={Signup} />\n              <Route path=\"/task-manager/signin\" component={Signin} />\n              <Route path=\"/task-manager/forgot-password\" component={ForgotPassword} />\n            </Switch>\n          </AuthProvider>\n        </Router>\n      </Fragment>\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/App\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}